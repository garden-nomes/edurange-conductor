# Make Swapfile
fallocate -l 2G /swapfile
chmod 600 /swapfile
mkswap /swapfile
swapon /swapfile

# Put chef stuff in place
mkdir -p /root/chef/cookbooks/op/recipes
cd /root/chef

# /root/chef/solo.rb
cat << EOF > solo.rb
root = File.absolute_path(File.dirname(__FILE__))

file_cache_path root
cookbook_path root + '/cookbooks'
EOF

# /root/chef/solo.json
cat << EOF > solo.json
{
  "run_list": [ "recipe[op::cheferror]", "recipe[op::default]" ]
}
EOF

# check for cheff error and write to s3 file if found
cat << EOF > /root/chef/cookbooks/op/recipes/cheferror.rb
ruby_block 'chef_error' do
	block do
		if File.exists? "/root/chef/chef-stacktrace.out"
			put = Net::HTTP::Put.new('<%= instance.com_page %>', 'content-type' => 'text/plain')
		  put.body = "error\n" + File.read("/root/chef/chef-stacktrace.out")

		  # send the PUT request
		  http = Net::HTTP.new('<%= Rails.configuration.x.aws['s3_bucket_name'] %>.<%= Rails.configuration.x.aws[Rails.configuration.x.aws['region']]['s3_endpoint'] %>', 443)
		  http.use_ssl = true
		  http.start
		  resp = http.request(put)
		  resp = [resp.code.to_i, resp.to_hash, resp.body]
		  http.finish
		end
	end
	action :run
end
EOF

# Bash Histories
cat << EOF > bash_histories.json
{
  "run_list": [ "recipe[op::bash_histories]" ]
}
EOF

cat << EOF > /root/chef/bash_histories.rb
require 'net/http'
while true do
begin
    put = Net::HTTP::Put.new('<%= instance.bash_history_page %>', 'content-type' => 'text/plain')

    bash_histories = Time.new.inspect + "\n"
    exit_statuses = Time.new.inspect + "\n"
    script_logs = Time.new.inspect + "\n"
    users = Dir.glob('/home/*').select { |f| File.directory? f }
    users.each do |user|
      hist_file = "#{user}/.bash_history"
      username = user[6..user.length]
      bash_histories += "## #{username}\n"
      if File.exists?(hist_file)
        bash_histories += File.open(hist_file, "r").read + "\n"
      end
      exit_file = "#{user}/.exit_status"
      username = user[6..user.length]
      exit_statuses += "## #{username}\n"
      if File.exists?(exit_file)
        exit_statuses += File.open(exit_file, "r").read + "\n"
      end      
      script_file = "#{user}/.script.log"
      username = user[6..user.length]
      script_logs += "## #{username}\n"
      if File.exists?(script_file)
        script_logs += File.open(script_file, "r").read + "\n"
      end
    end
    put.body = bash_histories

    # send the PUT request
    http = Net::HTTP.new('<%= Rails.configuration.x.aws['s3_bucket_name'] %>.<%= Rails.configuration.x.aws[Rails.configuration.x.aws['region']]['s3_endpoint'] %>', 443)
    http.use_ssl = true
    http.start
    resp = http.request(put)
    resp = [resp.code.to_i, resp.to_hash, resp.body]
    http.finish

    put2 = Net::HTTP::Put.new('<%= instance.exit_status_page %>', 'content-type' => 'text/plain')
    put2.body = exit_statuses
    http = Net::HTTP.new('<%= Rails.configuration.x.aws['s3_bucket_name'] %>.<%= Rails.configuration.x.aws[Rails.configuration.x.aws['region']]['s3_endpoint'] %>', 443)
    http.use_ssl = true
    http.start
    resp2 = http.request(put2)
    resp2 = [resp2.code.to_i, resp2.to_hash, resp2.body]
    http.finish

    put3 = Net::HTTP::Put.new('<%= instance.script_log_page %>', 'content-type' => 'text/plain')
    put3.body = script_logs
    http = Net::HTTP.new('<%= Rails.configuration.x.aws['s3_bucket_name'] %>.<%= Rails.configuration.x.aws[Rails.configuration.x.aws['region']]['s3_endpoint'] %>', 443)
    http.use_ssl = true
    http.start
    resp3 = http.request(put3)
    resp3 = [resp3.code.to_i, resp3.to_hash, resp3.body]
    http.finish
rescue => e
  sleep 60
end
  sleep 60
end
EOF

apt-get -y install ruby

cat << EOF > cron.sh
#!/usr/bin/env bash
wget -O /root/chef/cookbooks/op/recipes/default.rb '<%= instance.cookbook_url %>'
cd /root/chef
chef-solo -c solo.rb -j solo.json
EOF
chmod +x /root/chef/cron.sh

wget -O /root/chef/cookbooks/op/recipes/default.rb '<%= instance.cookbook_url %>'
chef-solo -c solo.rb -j solo.json

ruby /root/chef/bash_histories.rb &

echo "finished - CLOUD INIT"
